a:6:{s:9:"classesIn";a:1:{s:49:"SebastianBergmann\Comparator\NumberComparatorTest";a:6:{s:4:"name";s:20:"NumberComparatorTest";s:14:"namespacedName";s:49:"SebastianBergmann\Comparator\NumberComparatorTest";s:9:"namespace";s:28:"SebastianBergmann\Comparator";s:9:"startLine";i:20;s:7:"endLine";i:149;s:7:"methods";a:9:{s:23:"acceptsSucceedsProvider";a:6:{s:10:"methodName";s:23:"acceptsSucceedsProvider";s:9:"signature";s:32:"acceptsSucceedsProvider(): array";s:10:"visibility";s:6:"public";s:9:"startLine";i:31;s:7:"endLine";i:44;s:3:"ccn";i:1;}s:20:"acceptsFailsProvider";a:6:{s:10:"methodName";s:20:"acceptsFailsProvider";s:9:"signature";s:29:"acceptsFailsProvider(): array";s:10:"visibility";s:6:"public";s:9:"startLine";i:49;s:7:"endLine";i:60;s:3:"ccn";i:1;}s:28:"assertEqualsSucceedsProvider";a:6:{s:10:"methodName";s:28:"assertEqualsSucceedsProvider";s:9:"signature";s:37:"assertEqualsSucceedsProvider(): array";s:10:"visibility";s:6:"public";s:9:"startLine";i:65;s:7:"endLine";i:79;s:3:"ccn";i:1;}s:25:"assertEqualsFailsProvider";a:6:{s:10:"methodName";s:25:"assertEqualsFailsProvider";s:9:"signature";s:34:"assertEqualsFailsProvider(): array";s:10:"visibility";s:6:"public";s:9:"startLine";i:84;s:7:"endLine";i:95;s:3:"ccn";i:1;}s:19:"testAcceptsSucceeds";a:6:{s:10:"methodName";s:19:"testAcceptsSucceeds";s:9:"signature";s:27:"testAcceptsSucceeds(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:97;s:7:"endLine";i:105;s:3:"ccn";i:1;}s:16:"testAcceptsFails";a:6:{s:10:"methodName";s:16:"testAcceptsFails";s:9:"signature";s:54:"testAcceptsFails(mixed $expected, mixed $actual): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:107;s:7:"endLine";i:113;s:3:"ccn";i:1;}s:24:"testAssertEqualsSucceeds";a:6:{s:10:"methodName";s:24:"testAssertEqualsSucceeds";s:9:"signature";s:116:"testAssertEqualsSucceeds(int|\BcMath\Number|string $expected, int|\BcMath\Number|string $actual, float $delta): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:115;s:7:"endLine";i:126;s:3:"ccn";i:2;}s:29:"testAssertEqualsCanBeInverted";a:6:{s:10:"methodName";s:29:"testAssertEqualsCanBeInverted";s:9:"signature";s:121:"testAssertEqualsCanBeInverted(int|\BcMath\Number|string $actual, int|\BcMath\Number|string $expected, float $delta): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:128;s:7:"endLine";i:139;s:3:"ccn";i:2;}s:21:"testAssertEqualsFails";a:6:{s:10:"methodName";s:21:"testAssertEqualsFails";s:9:"signature";s:113:"testAssertEqualsFails(int|\BcMath\Number|string $expected, int|\BcMath\Number|string $actual, float $delta): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:141;s:7:"endLine";i:148;s:3:"ccn";i:1;}}}}s:8:"traitsIn";a:0:{}s:11:"functionsIn";a:0:{}s:14:"linesOfCodeFor";a:3:{s:11:"linesOfCode";i:150;s:18:"commentLinesOfCode";i:20;s:21:"nonCommentLinesOfCode";i:130;}s:15:"ignoredLinesFor";a:11:{i:0;i:20;i:1;i:21;i:2;i:22;i:3;i:23;i:4;i:24;i:5;i:25;i:6;i:26;i:7;i:107;i:8;i:115;i:9;i:128;i:10;i:141;}s:17:"executableLinesIn";a:69:{i:20;i:1;i:21;i:2;i:22;i:3;i:23;i:4;i:24;i:5;i:25;i:6;i:33;i:7;i:34;i:8;i:36;i:9;i:37;i:9;i:38;i:9;i:39;i:9;i:40;i:9;i:41;i:9;i:42;i:9;i:43;i:9;i:51;i:10;i:53;i:11;i:54;i:11;i:55;i:11;i:56;i:11;i:57;i:11;i:58;i:11;i:59;i:11;i:67;i:12;i:68;i:12;i:69;i:12;i:70;i:12;i:71;i:12;i:72;i:12;i:73;i:12;i:74;i:12;i:75;i:12;i:76;i:12;i:77;i:12;i:78;i:12;i:86;i:13;i:87;i:13;i:88;i:13;i:89;i:13;i:90;i:13;i:91;i:13;i:92;i:13;i:93;i:13;i:94;i:13;i:99;i:14;i:100;i:14;i:101;i:14;i:102;i:14;i:103;i:14;i:104;i:14;i:107;i:15;i:110;i:16;i:111;i:16;i:112;i:16;i:115;i:17;i:118;i:18;i:121;i:19;i:122;i:20;i:125;i:21;i:128;i:22;i:131;i:23;i:134;i:24;i:135;i:25;i:138;i:26;i:141;i:27;i:144;i:28;i:145;i:29;i:147;i:30;}}