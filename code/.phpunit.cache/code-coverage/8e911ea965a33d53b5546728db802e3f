a:6:{s:9:"classesIn";a:1:{s:49:"SebastianBergmann\Comparator\ObjectComparatorTest";a:6:{s:4:"name";s:20:"ObjectComparatorTest";s:14:"namespacedName";s:49:"SebastianBergmann\Comparator\ObjectComparatorTest";s:9:"namespace";s:28:"SebastianBergmann\Comparator";s:9:"startLine";i:18;s:7:"endLine";i:151;s:7:"methods";a:9:{s:23:"acceptsSucceedsProvider";a:6:{s:10:"methodName";s:23:"acceptsSucceedsProvider";s:9:"signature";s:32:"acceptsSucceedsProvider(): array";s:10:"visibility";s:6:"public";s:9:"startLine";i:29;s:7:"endLine";i:36;s:3:"ccn";i:1;}s:20:"acceptsFailsProvider";a:6:{s:10:"methodName";s:20:"acceptsFailsProvider";s:9:"signature";s:29:"acceptsFailsProvider(): array";s:10:"visibility";s:6:"public";s:9:"startLine";i:41;s:7:"endLine";i:48;s:3:"ccn";i:1;}s:28:"assertEqualsSucceedsProvider";a:6:{s:10:"methodName";s:28:"assertEqualsSucceedsProvider";s:9:"signature";s:37:"assertEqualsSucceedsProvider(): array";s:10:"visibility";s:6:"public";s:9:"startLine";i:53;s:7:"endLine";i:73;s:3:"ccn";i:1;}s:25:"assertEqualsFailsProvider";a:6:{s:10:"methodName";s:25:"assertEqualsFailsProvider";s:9:"signature";s:34:"assertEqualsFailsProvider(): array";s:10:"visibility";s:6:"public";s:9:"startLine";i:78;s:7:"endLine";i:106;s:3:"ccn";i:1;}s:5:"setUp";a:6:{s:10:"methodName";s:5:"setUp";s:9:"signature";s:13:"setUp(): void";s:10:"visibility";s:9:"protected";s:9:"startLine";i:108;s:7:"endLine";i:112;s:3:"ccn";i:1;}s:19:"testAcceptsSucceeds";a:6:{s:10:"methodName";s:19:"testAcceptsSucceeds";s:9:"signature";s:145:"testAcceptsSucceeds(\stdClass|\SebastianBergmann\Comparator\TestClass $expected, \stdClass|\SebastianBergmann\Comparator\TestClass $actual): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:114;s:7:"endLine";i:120;s:3:"ccn";i:1;}s:16:"testAcceptsFails";a:6:{s:10:"methodName";s:16:"testAcceptsFails";s:9:"signature";s:62:"testAcceptsFails(?stdClass $expected, ?stdClass $actual): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:122;s:7:"endLine";i:128;s:3:"ccn";i:1;}s:24:"testAssertEqualsSucceeds";a:6:{s:10:"methodName";s:24:"testAssertEqualsSucceeds";s:9:"signature";s:78:"testAssertEqualsSucceeds(object $expected, object $actual, float $delta): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:130;s:7:"endLine";i:141;s:3:"ccn";i:2;}s:21:"testAssertEqualsFails";a:6:{s:10:"methodName";s:21:"testAssertEqualsFails";s:9:"signature";s:92:"testAssertEqualsFails(object $expected, object $actual, string $message, float $delta): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:143;s:7:"endLine";i:150;s:3:"ccn";i:1;}}}}s:8:"traitsIn";a:0:{}s:11:"functionsIn";a:0:{}s:14:"linesOfCodeFor";a:3:{s:11:"linesOfCode";i:152;s:18:"commentLinesOfCode";i:22;s:21:"nonCommentLinesOfCode";i:130;}s:15:"ignoredLinesFor";a:9:{i:0;i:18;i:1;i:19;i:2;i:20;i:3;i:21;i:4;i:22;i:5;i:114;i:6;i:122;i:7;i:130;i:8;i:143;}s:17:"executableLinesIn";a:69:{i:18;i:1;i:19;i:2;i:20;i:3;i:21;i:4;i:31;i:6;i:32;i:6;i:33;i:6;i:34;i:6;i:35;i:6;i:43;i:7;i:44;i:7;i:45;i:7;i:46;i:7;i:47;i:7;i:56;i:8;i:57;i:9;i:58;i:10;i:59;i:11;i:60;i:12;i:61;i:13;i:63;i:14;i:64;i:15;i:66;i:16;i:67;i:16;i:68;i:16;i:69;i:16;i:70;i:16;i:71;i:16;i:72;i:16;i:80;i:17;i:81;i:18;i:84;i:19;i:85;i:20;i:86;i:21;i:87;i:22;i:88;i:23;i:89;i:24;i:91;i:25;i:92;i:26;i:93;i:27;i:94;i:28;i:96;i:29;i:97;i:30;i:99;i:31;i:100;i:31;i:101;i:31;i:102;i:31;i:103;i:31;i:104;i:31;i:105;i:31;i:110;i:32;i:111;i:33;i:114;i:34;i:117;i:35;i:118;i:35;i:119;i:35;i:122;i:36;i:125;i:37;i:126;i:37;i:127;i:37;i:130;i:38;i:133;i:39;i:136;i:40;i:137;i:41;i:140;i:42;i:143;i:43;i:146;i:44;i:147;i:45;i:149;i:46;}}