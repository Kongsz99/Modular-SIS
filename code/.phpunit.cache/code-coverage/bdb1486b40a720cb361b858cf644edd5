a:6:{s:9:"classesIn";a:1:{s:37:"SebastianBergmann\Type\SimpleTypeTest";a:6:{s:4:"name";s:14:"SimpleTypeTest";s:14:"namespacedName";s:37:"SebastianBergmann\Type\SimpleTypeTest";s:9:"namespace";s:22:"SebastianBergmann\Type";s:9:"startLine";i:19;s:7:"endLine";i:213;s:7:"methods";a:18:{s:15:"assignablePairs";a:6:{s:10:"methodName";s:15:"assignablePairs";s:9:"signature";s:24:"assignablePairs(): array";s:10:"visibility";s:6:"public";s:9:"startLine";i:33;s:7:"endLine";i:44;s:3:"ccn";i:1;}s:18:"notAssignablePairs";a:6:{s:10:"methodName";s:18:"notAssignablePairs";s:9:"signature";s:27:"notAssignablePairs(): array";s:10:"visibility";s:6:"public";s:9:"startLine";i:49;s:7:"endLine";i:58;s:3:"ccn";i:1;}s:13:"testCanBeBool";a:6:{s:10:"methodName";s:13:"testCanBeBool";s:9:"signature";s:21:"testCanBeBool(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:60;s:7:"endLine";i:65;s:3:"ccn";i:1;}s:16:"testCanBeBoolean";a:6:{s:10:"methodName";s:16:"testCanBeBoolean";s:9:"signature";s:24:"testCanBeBoolean(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:67;s:7:"endLine";i:72;s:3:"ccn";i:1;}s:15:"testCanBeDouble";a:6:{s:10:"methodName";s:15:"testCanBeDouble";s:9:"signature";s:23:"testCanBeDouble(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:74;s:7:"endLine";i:79;s:3:"ccn";i:1;}s:14:"testCanBeFloat";a:6:{s:10:"methodName";s:14:"testCanBeFloat";s:9:"signature";s:22:"testCanBeFloat(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:81;s:7:"endLine";i:86;s:3:"ccn";i:1;}s:13:"testCanBeReal";a:6:{s:10:"methodName";s:13:"testCanBeReal";s:9:"signature";s:21:"testCanBeReal(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:88;s:7:"endLine";i:93;s:3:"ccn";i:1;}s:12:"testCanBeInt";a:6:{s:10:"methodName";s:12:"testCanBeInt";s:9:"signature";s:20:"testCanBeInt(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:95;s:7:"endLine";i:100;s:3:"ccn";i:1;}s:16:"testCanBeInteger";a:6:{s:10:"methodName";s:16:"testCanBeInteger";s:9:"signature";s:24:"testCanBeInteger(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:102;s:7:"endLine";i:107;s:3:"ccn";i:1;}s:14:"testCanBeArray";a:6:{s:10:"methodName";s:14:"testCanBeArray";s:9:"signature";s:22:"testCanBeArray(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:109;s:7:"endLine";i:114;s:3:"ccn";i:1;}s:15:"testCanBeArray2";a:6:{s:10:"methodName";s:15:"testCanBeArray2";s:9:"signature";s:23:"testCanBeArray2(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:116;s:7:"endLine";i:121;s:3:"ccn";i:1;}s:16:"testMayAllowNull";a:6:{s:10:"methodName";s:16:"testMayAllowNull";s:9:"signature";s:24:"testMayAllowNull(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:123;s:7:"endLine";i:128;s:3:"ccn";i:1;}s:19:"testMayNotAllowNull";a:6:{s:10:"methodName";s:19:"testMayNotAllowNull";s:9:"signature";s:27:"testMayNotAllowNull(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:130;s:7:"endLine";i:135;s:3:"ccn";i:1;}s:16:"testIsAssignable";a:6:{s:10:"methodName";s:16:"testIsAssignable";s:9:"signature";s:104:"testIsAssignable(SebastianBergmann\Type\Type $assignTo, SebastianBergmann\Type\Type $assignedType): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:137;s:7:"endLine";i:141;s:3:"ccn";i:1;}s:19:"testIsNotAssignable";a:6:{s:10:"methodName";s:19:"testIsNotAssignable";s:9:"signature";s:107:"testIsNotAssignable(SebastianBergmann\Type\Type $assignTo, SebastianBergmann\Type\Type $assignedType): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:143;s:7:"endLine";i:147;s:3:"ccn";i:1;}s:16:"testCanHaveValue";a:6:{s:10:"methodName";s:16:"testCanHaveValue";s:9:"signature";s:24:"testCanHaveValue(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:149;s:7:"endLine";i:155;s:3:"ccn";i:1;}s:23:"testCanBeQueriedForType";a:6:{s:10:"methodName";s:23:"testCanBeQueriedForType";s:9:"signature";s:31:"testCanBeQueriedForType(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:157;s:7:"endLine";i:205;s:3:"ccn";i:1;}s:18:"testNormalizesName";a:6:{s:10:"methodName";s:18:"testNormalizesName";s:9:"signature";s:26:"testNormalizesName(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:207;s:7:"endLine";i:212;s:3:"ccn";i:1;}}}}s:8:"traitsIn";a:0:{}s:11:"functionsIn";a:0:{}s:14:"linesOfCodeFor";a:3:{s:11:"linesOfCode";i:214;s:18:"commentLinesOfCode";i:29;s:21:"nonCommentLinesOfCode";i:185;}s:15:"ignoredLinesFor";a:12:{i:0;i:19;i:1;i:20;i:2;i:21;i:3;i:22;i:4;i:23;i:5;i:24;i:6;i:25;i:7;i:26;i:8;i:27;i:9;i:28;i:10;i:137;i:11;i:143;}s:17:"executableLinesIn";a:72:{i:19;i:1;i:20;i:2;i:21;i:3;i:22;i:4;i:23;i:5;i:24;i:6;i:25;i:7;i:26;i:8;i:27;i:9;i:35;i:10;i:36;i:10;i:37;i:10;i:38;i:10;i:39;i:10;i:40;i:10;i:41;i:10;i:42;i:10;i:43;i:10;i:51;i:11;i:52;i:11;i:53;i:11;i:54;i:11;i:55;i:11;i:56;i:11;i:57;i:11;i:62;i:12;i:64;i:13;i:69;i:14;i:71;i:15;i:76;i:16;i:78;i:17;i:83;i:18;i:85;i:19;i:90;i:20;i:92;i:21;i:97;i:22;i:99;i:23;i:104;i:24;i:106;i:25;i:111;i:26;i:113;i:27;i:118;i:28;i:120;i:29;i:125;i:30;i:127;i:31;i:132;i:32;i:134;i:33;i:137;i:34;i:140;i:35;i:143;i:36;i:146;i:37;i:151;i:38;i:153;i:39;i:154;i:40;i:159;i:41;i:162;i:42;i:165;i:43;i:168;i:44;i:171;i:45;i:174;i:46;i:177;i:47;i:180;i:48;i:183;i:49;i:186;i:50;i:189;i:51;i:192;i:52;i:195;i:53;i:198;i:54;i:201;i:55;i:204;i:56;i:209;i:57;i:211;i:58;}}